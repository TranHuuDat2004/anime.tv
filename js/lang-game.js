// js/i18n-game.js (Gi·ªØ nguy√™n c·∫•u tr√∫c c·ªßa b·∫°n, ch·ªâ c·∫ßn ƒë·∫£m b·∫£o c√°c key kh·ªõp)
const translations = {
    en: {
        docTitle: "Puzzle Game - ANIME.TV",
        // Navbar (S·ª≠ d·ª•ng data-translate-nav)
        "home": "Home",
        "imageGallery": "Image Gallery",
        "gifCollection": "GIF Collection",
        "puzzleGame": "Puzzle Game",
        "login": "Login",

        gameTitle: "Jigsaw Puzzle",
        gameSubtitle: "Click an image to rotate. Drag and drop images to the correct position.",
        howToPlayButton: "How to Play",
        sidebarTitle: "Puzzle Tips",
        sidebarContentHTML: `<p>Welcome to the puzzle challenge!</p>
                             <p><strong>Get started:</strong> Choose an image you like below.</p>
                             <p><strong>Familiarize with pieces:</strong> The pieces are mixed up and rotated. Don't worry, click on them to rotate them to the correct orientation.</p>
                             <p><strong>Arrange them:</strong> Drag each piece to the correct cell on the 3x3 grid. Refer to the original image on the left.</p>
                             <p><strong>Complete:</strong> When the picture is fully assembled (correct position, correct angle), you are the winner!</p>
                             <hr>
                             <p><strong>Challenge yourself:</strong></p>
                             <p>You can play in <strong>Classic</strong> mode to see how long you take, or try <strong>Countdown</strong> mode (20-60 seconds) for an extra thrill!</p>
                             <p>Enjoy your relaxing moments!</p>`,
        modeTitle: "Game Mode:",
        modeClassic: "Classic (Count Up)",
        modeCountdown: "Countdown",
        modeSeconds: "Seconds:",
        secondsUnit: "s", // Gi·ªØ "s" cho ng·∫Øn g·ªçn
        refTitle: "Original Image",
        refAlt: "Reference original image",
        timerLabelPrefix: "Time: ", // Quan tr·ªçng: game.js c√≥ th·ªÉ d√πng key n√†y
        piecesTitle: "Puzzle Pieces",
        selectPuzzleTitle: "Choose Another Puzzle",
        // Footer (S·ª≠ d·ª•ng data-translate-footer)
        "about": "About Us",
        "help": "Help/FAQ",
        "terms": "Terms of Service",
        "privacy": "Privacy Policy",
        "copyright": "¬© <span id='currentYear'></span> ANIME.TV. Based on an idea from Crunchyroll.",

        winModalTitle: "üéâ Congratulations! üéâ",
        winModalBodyHTML: "You have completed the puzzle! <br>Your time is: <strong id='final-time'></strong>",
        winModalClose: "Close",
        winModalPlayAgain: "Play Again",
        loseModalTitle: "Too Bad! Time's Up",
        loseModalBodyHTML: "You didn't complete the puzzle in time. <br>Try harder next time!",
        loseModalClose: "Close",
        loseModalPlayAgain: "Play Again"
    },
    vi: {
        docTitle: "Game X·∫øp H√¨nh - ANIME.TV",
        "home": "Trang Ch·ªß",
        "imageGallery": "·∫¢nh Anime",
        "gifCollection": "B·ªô S∆∞u T·∫≠p GIF",
        "puzzleGame": "Game X·∫øp H√¨nh",
        "login": "ƒêƒÉng Nh·∫≠p",

        gameTitle: "Game X·∫øp H√¨nh",
        gameSubtitle: "Click v√†o ·∫£nh ƒë·ªÉ xoay. K√©o th·∫£ ·∫£nh v√†o ƒë√∫ng v·ªã tr√≠.",
        howToPlayButton: "H∆∞·ªõng d·∫´n",
        sidebarTitle: "B√≠ K√≠p X·∫øp H√¨nh",
        sidebarContentHTML: `<p>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi th·ª≠ th√°ch x·∫øp h√¨nh!</p>
                             <p><strong>B·∫Øt ƒë·∫ßu n√†o:</strong> H√£y ch·ªçn m·ªôt b·ª©c ·∫£nh b·∫°n th√≠ch ·ªü ph√≠a d∆∞·ªõi nh√©.</p>
                             <p><strong>L√†m quen m·∫£nh gh√©p:</strong> C√°c m·∫£nh gh√©p ƒëang b·ªã l·ªôn x·ªôn v√† xoay t·ª© tung. ƒê·ª´ng lo, h√£y click v√†o ch√∫ng ƒë·ªÉ xoay v·ªÅ ƒë√∫ng chi·ªÅu.</p>
                             <p><strong>X·∫øp th√¥i:</strong> D√πng chu·ªôt k√©o t·ª´ng m·∫£nh gh√©p v√†o ƒë√∫ng √¥ tr√™n b·∫£ng 3x3. H√£y nh√¨n ·∫£nh g·ªëc b√™n tr√°i ƒë·ªÉ tham kh·∫£o nh√©.</p>
                             <p><strong>Ho√†n th√†nh:</strong> Khi b·ª©c tranh hi·ªán ra ho√†n ch·ªânh (ƒë√∫ng v·ªã tr√≠, ƒë√∫ng g√≥c), b·∫°n l√† ng∆∞·ªùi chi·∫øn th·∫Øng!</p>
                             <hr>
                             <p><strong>Th·ª≠ th√°ch b·∫£n th√¢n:</strong></p>
                             <p>B·∫°n c√≥ th·ªÉ ch∆°i ch·∫ø ƒë·ªô <strong>C·ªï ƒëi·ªÉn</strong> ƒë·ªÉ xem m√¨nh x·∫øp trong bao l√¢u, ho·∫∑c th·ª≠ ch·∫ø ƒë·ªô <strong>ƒê·∫øm ng∆∞·ª£c</strong> (20-60 gi√¢y) ƒë·ªÉ tƒÉng ph·∫ßn gay c·∫•n!</p>
                             <p>Ch√∫c b·∫°n c√≥ nh·ªØng ph√∫t gi√¢y th∆∞ gi√£n!</p>`,
        modeTitle: "Ch·∫ø ƒë·ªô ch∆°i:",
        modeClassic: "C·ªï ƒëi·ªÉn",
        modeCountdown: "ƒê·∫øm ng∆∞·ª£c",
        modeSeconds: "Gi√¢y:",
        secondsUnit: "gi√¢y",
        refTitle: "·∫¢nh G·ªëc",
        refAlt: "·∫¢nh g·ªëc tham kh·∫£o",
        timerLabelPrefix: "Th·ªùi gian: ",
        piecesTitle: "C√°c M·∫£nh Gh√©p",
        selectPuzzleTitle: "Ch·ªçn ·∫¢nh Kh√°c",
        "about": "V·ªÅ ch√∫ng t√¥i",
        "help": "Tr·ª£ gi√∫p/FAQ",
        "terms": "ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng",
        "privacy": "Ch√≠nh s√°ch ri√™ng t∆∞",
        "copyright": "¬© <span id='currentYear'></span> ANIME.TV. D·ª±a tr√™n √Ω t∆∞·ªüng t·ª´ Crunchyroll.",

        winModalTitle: "üéâ Ch√∫c M·ª´ng! üéâ",
        winModalBodyHTML: "B·∫°n ƒë√£ ho√†n th√†nh b·ª©c tranh! <br>Th·ªùi gian c·ªßa b·∫°n l√†: <strong id='final-time'></strong>",
        winModalClose: "ƒê√≥ng",
        winModalPlayAgain: "Ch∆°i L·∫°i",
        loseModalTitle: "R·∫•t Ti·∫øc! ƒê√£ H·∫øt Gi·ªù",
        loseModalBodyHTML: "B·∫°n ƒë√£ kh√¥ng ho√†n th√†nh b·ª©c tranh trong th·ªùi gian quy ƒë·ªãnh.<br>H√£y c·ªë g·∫Øng h∆°n ·ªü l·∫ßn ch∆°i sau nh√©!",
        loseModalClose: "ƒê√≥ng",
        loseModalPlayAgain: "Ch∆°i L·∫°i"
    }
};

function setLanguage(lang) {
    if (!translations[lang]) {
        console.error("Language not supported:", lang);
        return;
    }
    document.documentElement.lang = lang;
    const langTranslations = translations[lang];

    // D·ªãch c√°c element c√≥ data-translate
    document.querySelectorAll('[data-translate]').forEach(element => {
        const key = element.getAttribute('data-translate');
        if (langTranslations[key] !== undefined) {
            if (key.endsWith('HTML')) {
                element.innerHTML = langTranslations[key];
            } else if (element.tagName === 'TITLE' || element.tagName === 'H1' || element.tagName === 'H5' || element.tagName === 'P' || element.tagName === 'LABEL' || element.tagName === 'STRONG' || element.classList.contains('seconds-unit-text')) {
                 element.textContent = langTranslations[key];
            } else if (element.tagName === 'IMG' && element.hasAttribute('alt')) {
                 element.alt = langTranslations[key];
            } else if (element.tagName === 'BUTTON' && !element.innerHTML.includes('<svg')) { // Ch·ªâ ƒë·ªïi text n·∫øu kh√¥ng c√≥ SVG b√™n trong
                 element.textContent = langTranslations[key];
            }
        } else {
            console.warn(`Translation key "${key}" not found for language "${lang}".`);
        }
    });

    // D·ªãch c√°c element c√≥ data-translate-nav (cho navbar)
     document.querySelectorAll('[data-translate-nav]').forEach(element => {
        const key = element.getAttribute('data-translate-nav');
        if (langTranslations[key] !== undefined) {
             element.textContent = langTranslations[key];
        }
    });
     // D·ªãch c√°c element c√≥ data-translate-footer (cho footer)
     document.querySelectorAll('[data-translate-footer]').forEach(element => {
        const key = element.getAttribute('data-translate-footer');
        if (langTranslations[key] !== undefined) {
             if (key === 'copyright' && lang === 'vi') { // X·ª≠ l√Ω ri√™ng cho copyright ti·∫øng Vi·ªát
                element.innerHTML = langTranslations[key].replace('<span id=\'currentYear\'></span>', `<span id='currentYear'>${new Date().getFullYear()}</span>`);
             } else if (key === 'copyright' && lang === 'en') {
                element.innerHTML = langTranslations[key].replace('<span id=\'currentYear\'></span>', `<span id='currentYear'>${new Date().getFullYear()}</span>`);
             }
             else {
                element.textContent = langTranslations[key];
             }
        }
    });


    // C·∫≠p nh·∫≠t timer display n·∫øu game.js c√≥ h√†m n√†y
    if (typeof window.updateTimerDisplayLanguage === 'function') {
        window.updateTimerDisplayLanguage(langTranslations.timerLabelPrefix || "Th·ªùi gian: ");
    } else { // Fallback n·∫øu game.js kh√¥ng c√≥ h√†m ƒë√≥
        const timerDisplay = document.getElementById('timer-display');
        if (timerDisplay && timerDisplay.textContent.includes(':')) {
            const currentTime = timerDisplay.textContent.split(':').slice(1).join(':').trim();
            timerDisplay.textContent = (langTranslations.timerLabelPrefix || "Th·ªùi gian: ") + currentTime;
        }
    }


    document.querySelectorAll('.lang-switcher .lang-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-lang') === lang) btn.classList.add('active');
    });
    localStorage.setItem('preferredLanguage', lang);
}

document.addEventListener('DOMContentLoaded', () => {
    const yearSpan = document.getElementById('currentYear');
    if (yearSpan) yearSpan.textContent = new Date().getFullYear();

    const langButtons = document.querySelectorAll('.lang-switcher .lang-btn');
    langButtons.forEach(button => {
        button.addEventListener('click', (event) => {
            const selectedLang = event.target.closest('.lang-btn').getAttribute('data-lang');
            setLanguage(selectedLang);
        });
    });

    const browserLang = navigator.language.split('-')[0];
    const preferredLang = localStorage.getItem('preferredLanguage') || (translations[browserLang] ? browserLang : 'vi');
    setLanguage(preferredLang);
});